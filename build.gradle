buildscript {
	// 24.07.21 기준 최신 버전
	ext {
		protobufVersion = '4.27.2'
		protobufPluginVersion = '0.9.4'
		grpcVersion = '1.65.1'
	}
}

plugins {
	id 'java'
	id 'org.springframework.boot' version '3.3.3'
	id 'io.spring.dependency-management' version '1.1.6'

	// Protobuf 플러그인 적용하여 .proto 파일을 컴파일할 수 있다. 여기서 버전은 ext에 정의된 protobufPluginVersion을 사용한다.
	id 'java-library'
	id 'com.google.protobuf' version "${protobufPluginVersion}"
}

group = 'wanted'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'

	// gRPC 서버 설정. 큌 스타터에선 jakarta를 추가 했지만 우리는 롬복을 사용하기 위해 해당 부분은 생략했음.
	implementation "io.grpc:grpc-protobuf:${grpcVersion}" // Protobuf 메시지와 gRPC의 통합을 지원
	implementation "io.grpc:grpc-stub:${grpcVersion}" // gRPC 클라이언트 스텁을 생성

	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

protobuf {
	// Protobuf 컴파일러를 지정하여 .proto 파일을 컴파일합니다.
	protoc {
		artifact = "com.google.protobuf:protoc:${protobufVersion}"
	}

	// 프로토콜 컴파일러에서 생성된 소스 코드의 위치 설정
	generatedFilesBaseDir = "$projectDir/src/generated"

	// 생성된 파일을 정리합니다.
	clean {
		delete generatedFilesBaseDir
	}

	// gRPC 플러그인을 설정하여 Protobuf 파일로부터 gRPC 관련 코드를 생성합니다.
	plugins {
		grpc {
			artifact = "io.grpc:protoc-gen-grpc-java:${grpcVersion}"
		}
	}

	// 모든 프로토콜 버퍼 작업에 대해 gRPC 플로그인을 적용합니다.
	generateProtoTasks {
		all()*.plugins {
			grpc {}
		}
	}
}

tasks.named('test') {
	useJUnitPlatform()
}
